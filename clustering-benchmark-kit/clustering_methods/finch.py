import timeimport numpy as npfrom scipy.spatial.distance import cdistfrom sklearn.preprocessing import normalizedef finch_cluster(X):    start = time.time()    # Normalize data    X = normalize(X)    # First step: nearest neighbor    sim = np.dot(X, X.T)    np.fill_diagonal(sim, -np.inf)    nn = np.argmax(sim, axis=1)    # Find mutual connections    cluster_ids = np.arange(len(X))    for i in range(len(X)):        j = nn[i]        if nn[j] == i:            cluster_ids[i] = min(i, j)            cluster_ids[j] = min(i, j)    # Relabel    unique_ids = np.unique(cluster_ids)    label_map = {uid: idx for idx, uid in enumerate(unique_ids)}    y_pred = np.array([label_map[cluster_ids[i]] for i in range(len(X))])    end = time.time()    return y_pred, start, end