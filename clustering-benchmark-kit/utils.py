import timeimport numpy as npimport pandas as pdfrom sklearn.metrics import adjusted_rand_score, f1_score, accuracy_scorefrom sklearn.manifold import TSNEimport matplotlib.pyplot as pltimport osfrom clustering_methods import *def run_clustering_methods(X, method_flags):    outputs = {}    if "all" in method_flags or "partitioning" in method_flags:        outputs["KMeans"] = kmeans_cluster(X)    if "all" in method_flags or "hierarchical" in method_flags:        outputs["SingleLinkage"] = single_linkage_cluster(X)    if "all" in method_flags or "density" in method_flags:        outputs["DBSCAN"] = dbscan_cluster(X)    if "all" in method_flags or "graph" in method_flags:        outputs["Spectral"] = spectral_cluster(X)    # Add your other clustering methods here (e.g., FINCH, SOM, etc.)    return outputsdef evaluate_all_metrics(results, X, y_true, dataset_name):    records = []    for method_name, (y_pred, start, end) in results.items():        ari = adjusted_rand_score(y_true, y_pred)        f1 = f1_score(y_true, y_pred, average='macro')        acc = accuracy_score(y_true, y_pred)        runtime = end - start        retained = len(np.unique(y_pred)) / len(np.unique(y_true)) * 100        records.append({            "Dataset": dataset_name,            "Method": method_name,            "ARI": ari,            "F1": f1,            "Accuracy": acc,            "Time": runtime,            "% Retained": f"{retained:.2f}"        })    return recordsdef plot_2d_scatter(X, results, dataset_name):    X_2d = TSNE(n_components=2, init='random', random_state=42).fit_transform(X)    for method_name, (y_pred, _, _) in results.items():        plt.figure()        plt.scatter(X_2d[:, 0], X_2d[:, 1], c=y_pred, cmap='tab10', s=10)        plt.title(f"{dataset_name} â€“ {method_name}")        plt.tight_layout()        os.makedirs("scatterplots", exist_ok=True)        plt.savefig(f"scatterplots/{dataset_name}_{method_name}_scatter.png")        plt.close()def plot_bar_charts(records):    df = pd.DataFrame(records)    for metric in ["ARI", "F1", "Accuracy", "Time", "% Retained"]:        plt.figure()        df.groupby("Method")[metric].mean().plot(kind="bar")        plt.title(f"Average {metric}")        plt.ylabel(metric)        plt.tight_layout()        os.makedirs("plots", exist_ok=True)        plt.savefig(f"plots/bar_{metric}.png")        plt.close()def generate_latex_table(records):    df = pd.DataFrame(records)    pivot = df.pivot_table(index="Method", values=["ARI", "F1", "Accuracy", "Time", "% Retained"], aggfunc="mean")    os.makedirs("latex_tables", exist_ok=True)    with open("latex_tables/clustering_results.tex", "w") as f:        f.write(pivot.to_latex(float_format="%.3f"))