import argparseimport osfrom datasets_loader import load_all_datasetsfrom utils import (    run_clustering_methods,    evaluate_all_metrics,    plot_2d_scatter,    plot_bar_charts,    generate_latex_table)def main():    parser = argparse.ArgumentParser(description="Clustering Benchmark Toolkit")    parser.add_argument("--methods", nargs="+", default=["all"],                        help="Choose methods: all, graph, density, neural, partitioning, hierarchical")    parser.add_argument("--visualize", action="store_true", help="Generate 2D scatterplots")    parser.add_argument("--plot", action="store_true", help="Generate bar plots of results")    parser.add_argument("--latex", action="store_true", help="Export LaTeX table")    parser.add_argument("--output", default="results.csv", help="Output CSV path")    args = parser.parse_args()    print("ðŸ“¦ Loading datasets...")    datasets = load_all_datasets()    print("ðŸ§  Running clustering methods...")    all_results = []    for dataset_name, (X, y_true) in datasets.items():        print(f"\nðŸ“Š Dataset: {dataset_name}")        clustering_outputs = run_clustering_methods(X, args.methods)        metrics = evaluate_all_metrics(clustering_outputs, X, y_true, dataset_name)        all_results.extend(metrics)        if args.visualize:            plot_2d_scatter(X, clustering_outputs, dataset_name)    if args.plot:        plot_bar_charts(all_results)    if args.latex:        generate_latex_table(all_results)    # Save raw results    import pandas as pd    df = pd.DataFrame(all_results)    df.to_csv(args.output, index=False)    print(f"\nâœ… Results saved to {args.output}")if __name__ == "__main__":    main()